package com.bnp.cservices.frontend.config;

import com.google.gson.Gson;
import java.util.Collections;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.GsonHttpMessageConverter;
import org.springframework.http.converter.xml.SourceHttpMessageConverter;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

/**
 * This class configure the Spring MVC controller context for the application.
 * <p>
 * This context should include all the Spring MVC controllers that will handle the requests to the application.
 * <p>
 * The @ComponentScan is loading all configuration within the same package (and child packages) as WebMvcConfiguration.
 */
@EnableWebMvc
@Configuration
// in this component scan annotation, set all the packages that contains your MVC controllers classes.
@ComponentScan({"com.bnp.cservices.controllers"})
public class WebMvcConfiguration implements WebMvcConfigurer {

    private static final Logger LOGGER = LoggerFactory.getLogger(WebMvcConfiguration.class);

    /**
     * Specify the cache period for the resources served by the resource handler, in seconds. The default is to not send
     * any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers that
     * prevent caching, or to a positive number of seconds to send cache headers with the given max-age value.
     */
    private static final int CACHE_PERIOD = 60;

    /**
     * Add handlers to serve static resources such as images, js, and, css files from specific locations under web
     * application root, the classpath, and others.
     *
     * @param registry the registry.
     */
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        LOGGER.debug("addResourceHandlers");
        registry.addResourceHandler("/static/**").addResourceLocations("/static/").setCachePeriod(CACHE_PERIOD);
        registry.addResourceHandler("/").addResourceLocations("/index.html").setCachePeriod(CACHE_PERIOD);
        registry.addResourceHandler("/index.html").addResourceLocations("/index.html").setCachePeriod(CACHE_PERIOD);
        registry.addResourceHandler("/logout.html").addResourceLocations("/logout.html").setCachePeriod(CACHE_PERIOD);
    }

    /**
     * Configure a handler to delegate unhandled requests by forwarding to the Servlet container's "default" servlet. A
     * common use case for this is when the DispatcherServlet is mapped to "/" thus overriding the Servlet container's
     * default handling of static resources. Set default servlet handler, this is the same as
     * <mvc:default-servlet-handler/>
     *
     * @param configurer the configurer.
     */
    @Override
    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        LOGGER.debug("configureDefaultServletHandling");
        configurer.enable();
    }

    /**
     * Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (i.e. Servlets and JSPs) and
     * subclasses such as JstlView.
     * <p>
     * The view class for all views generated by this resolver can be specified via setViewClass. See
     * UrlBasedViewResolver's javadoc for details. The default is InternalResourceView, or JstlView if the JSTL API is
     * present.
     * <p>
     * BTW, it's good practice to put JSP files that just serve as views under WEB-INF, to hide them from direct access
     * (e.g. via a manually entered URL). Only controllers will be able to access them then.
     * <p>
     * Note: When chaining ViewResolvers, an InternalResourceViewResolver always needs to be last, as it will attempt to
     * resolve any view name, no matter whether the underlying resource actually exists.
     *
     * @return InternalResourceViewResolver
     */
    @Bean
    public InternalResourceViewResolver internalResourceViewResolver() {
        LOGGER.debug("create internalResourceViewResolver");
        InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();
        internalResourceViewResolver.setViewClass(JstlView.class);
        internalResourceViewResolver.setPrefix("/WEB-INF/jsp/");
        internalResourceViewResolver.setSuffix(".jsp");
        return internalResourceViewResolver;
    }

    /**
     * Set up GSON for bean conversion.
     *
     * @param converters the list of converters.
     */
    @Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        StringHttpMessageConverter stringConverter = new StringHttpMessageConverter();
        stringConverter.setWriteAcceptCharset(false);
        stringConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.TEXT_PLAIN));
        converters.add(new ByteArrayHttpMessageConverter());
        converters.add(new SourceHttpMessageConverter<>());
        GsonHttpMessageConverter gsonHttpMessageConverter = new GsonHttpMessageConverter();
        gsonHttpMessageConverter.setGson(new Gson());
        gsonHttpMessageConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.APPLICATION_JSON));
        converters.add(gsonHttpMessageConverter);
    }

}
