# Spring configuration
spring.profiles.active=dev
spring.application.name=@_application#spring.application.name_@
spring.application.index=index.html

# Server configuration
server.port=@_springboot#serverport_@
server.contextPath=@_springboot#contextpath_@
server.session.timeout=10

#
# ENable / Disable the security check in Sesame.
#
authentication-provider.is-security-enabled=false
authentication-provider.contactMessage=Please contact your CI
authentication-provider.appDomain=SAF

#
# Sesame URL configuration
#
#sesame-web-service.authorization.url=http://localhost:8085/services/pub/commons/v1/AuthorizationServicesWSP
#sesame-web-service.identity.url=http://localhost:8085/services/pub/commons/v1/IdentityServicesWSP
#sesame-web-service.authentication.url=http://localhost:8085/services/pub/commons/v1/AuthenticationServicesWSP
url.sesame.server=@_springboot#sesame.service.url_@
#sesame-web-service.authorization.url=http://localhost:8080/sesame_services/services/AuthorizationServicesWSP
#sesame-web-service.identity.url=http://localhost:8080/sesame_services/services/IdentityServicesWSP
#sesame-web-service.authentication.url=http://localhost:8080/sesame_services/services/AuthenticationServicesWSP

#
# Database configuration
#
#spring.datasource.url=jdbc:h2:file:E:/h2/application;IFEXISTS=FALSE;AUTO_SERVER=TRUE;
spring.datasource.url=@_springboot#database.url_@
spring.datasource.username=@_springboot#database.usrname_@
spring.datasource.password=@_springboot#database.password_@
spring.datasource.driver-class-name=@_springboot#database.driver_@

# (boolean) The default auto-commit state of connections created by this pool. 
# If not set, default is JDBC driver default (If not set then the setAutoCommit method will not be called.) 
spring.datasource.tomcat.default-auto-commit=false
# (int) The maximum number of active connections that can be allocated from this pool at the same time. 
# The default value is 100
spring.datasource.tomcat.max-active=30
# (int) The maximum number of connections that should be kept in the pool at all times. 
# Default value is maxIdle:100 
# Idle connections are checked periodically (if enabled) and connections that been idle for longer than minEvictableIdleTimeMillis will be released. (also see testWhileIdle)
spring.datasource.tomcat.max-idle=20
# (int) The minimum number of established connections that should be kept in the pool at all times. 
# The connection pool can shrink below this number if validation queries fail. Default value is derived from initialSize:10 (also see testWhileIdle) 
spring.datasource.tomcat.min-idle=2
# (int)The initial number of connections that are created when the pool is started. 
# Default value is 10
spring.datasource.tomcat.initial-size=2
# (int) The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. 
# Default value is 30000 (30 seconds)
spring.datasource.tomcat.max-wait=45000
# (boolean) The indication of whether objects will be validated before being borrowed from the pool. 
# If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another. 
# In order to have a more efficient validation, see validationInterval. 
# Default value is false
spring.datasource.tomcat.test-on-borrow=true
# (boolean) The indication of whether objects will be validated before being returned to the pool. 
# The default value is false.
spring.datasource.tomcat.test-on-return=false
# (boolean) The indication of whether objects will be validated by the idle object evictor (if any). 
# If an object fails to validate, it will be dropped from the pool. 
# The default value is false and this property has to be set in order for the pool cleaner/test thread is to run (also see timeBetweenEvictionRunsMillis)
spring.datasource.tomcat.test-while-idle=true
# (String) The SQL query that will be used to validate connections from this pool before returning them to the caller. 
# If specified, this query does not have to return any data, it just can't throw a SQLException. 
# The default value is null. If not specified, connections will be validation by the isValid() method. 
# Example values are SELECT 1(mysql), select 1 from dual(oracle), SELECT 1(MS Sql Server)
spring.datasource.tomcat.validation-query=select 1
# (int) The timeout in seconds before a connection validation queries fail. 
# This works by calling java.sql.Statement.setQueryTimeout(seconds) on the statement that executes the validationQuery. 
# The pool itself doesn't timeout the query, it is still up to the JDBC driver to enforce query timeouts. 
# A value less than or equal to zero will disable this feature. 
# The default value is -1.
spring.datasource.tomcat.validation-query-timeout=60
# (int) The number of milliseconds to sleep between runs of the idle connection validation/cleaner thread. 
# This value should not be set under 1 second. 
# It dictates how often we check for idle, abandoned connections, and how often we validate idle connections. 
# The default value is 5000 (5 seconds). 
spring.datasource.tomcat.time-between-eviction-runs-millis=5000
# (long) avoid excess validation, only run validation at most at this frequency - time in milliseconds. 
# If a connection is due for validation, but has been validated previously within this interval, it will not be validated again. 
# The default value is 3000 (3 seconds).
spring.datasource.tomcat.validation-interval=5000
# (boolean) Flag to remove abandoned connections if they exceed the removeAbandonedTimeout. 
# If set to true a connection is considered abandoned and eligible for removal if it has been in use longer than the removeAbandonedTimeout Setting this to true can recover db connections from applications that fail to close a connection. 
# See also logAbandoned 
# The default value is false.
spring.datasource.tomcat.remove-abandoned=true
# (int) Timeout in seconds before an abandoned(in use) connection can be removed. 
# The default value is 60 (60 seconds). 
# The value should be set to the longest running query your applications might have. 
spring.datasource.tomcat.remove-abandoned-timeout=60
# (boolean) Flag to log stack traces for application code which abandoned a Connection. 
# Logging of abandoned Connections adds overhead for every Connection borrow because a stack trace has to be generated. 
# The default value is false. 
spring.datasource.tomcat.log-abandoned=true

#
# persistence configuration
#
spring.datasource.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.datasource.hibernate.show_sql=false
spring.datasource.hibernate.format_sql=true
spring.datasource.hibernate.generate_statistics=true;

